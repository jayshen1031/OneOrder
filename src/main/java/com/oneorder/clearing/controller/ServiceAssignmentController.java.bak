package com.oneorder.clearing.controller;

import com.oneorder.clearing.entity.*;
import com.oneorder.clearing.repository.*;
import com.oneorder.clearing.dto.*;
import com.oneorder.clearing.service.NotificationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * 服务派单控制器
 */
@Tag(name = "服务派单管理", description = "服务派单和协议匹配相关接口")
// Temporarily commented out due to compilation errors
// @RestController
// @RequestMapping("/api/service-assignment")
// @RequiredArgsConstructor
// @Slf4j
public class ServiceAssignmentController {
    
    // private final OrderRepository orderRepository; // 暂时注释掉，OrderRepository不存在
    private final OrderServiceRepository orderServiceRepository;
    private final StaffRepository staffRepository;
    private final InternalProtocolRepository internalProtocolRepository;
    private final ServiceAssignmentNotificationRepository notificationRepository;
    private final NotificationService notificationService;
    
    @Operation(summary = "为服务分配操作人员", description = "客服为具体服务指派操作人员并选择内部协议")
    @PostMapping("/services/{serviceId}/assign")
    public ResponseEntity<Map<String, Object>> assignService(
            @PathVariable Long serviceId,
            @Valid @RequestBody ServiceAssignmentRequest request) {
        log.info("服务派单请求 - 服务ID: {}, 操作员: {}, 协议: {}", 
                serviceId, request.getOperationStaffId(), request.getProtocolId());
        
        Map<String, Object> result = new HashMap<>();
        
        try {
            // 1. 验证服务存在且状态正确
            OrderService orderService = orderServiceRepository.findById(serviceId)
                .orElseThrow(() -> new EntityNotFoundException("服务不存在"));
            
            if (!OrderService.ServiceStatus.PENDING.equals(orderService.getStatus())) {
                result.put("success", false);
                result.put("message", "服务状态不允许派单");
                return ResponseEntity.badRequest().body(result);
            }
            
            // 2. 验证客服权限（必须是订单负责人）
            Order order = orderRepository.findById(orderService.getOrderId())
                .orElseThrow(() -> new EntityNotFoundException("订单不存在"));
            
            if (!order.getResponsibleStaffId().equals(request.getCustomerServiceId())) {
                result.put("success", false);
                result.put("message", "只有订单负责人才能派单");
                return ResponseEntity.badRequest().body(result);
            }
            
            // 3. 验证操作人员
            Staff operationStaff = staffRepository.findById(request.getOperationStaffId())
                .orElseThrow(() -> new EntityNotFoundException("操作人员不存在"));
            
            if (!Staff.RoleType.OPERATION.equals(operationStaff.getRoleType()) || !operationStaff.getActive()) {
                result.put("success", false);
                result.put("message", "只能派单给有效的操作人员");
                return ResponseEntity.badRequest().body(result);
            }
            
            // 4. 验证内部协议
            InternalProtocol protocol = internalProtocolRepository.findById(request.getProtocolId())
                .orElseThrow(() -> new EntityNotFoundException("内部协议不存在"));
            
            if (!protocol.getActive()) {
                result.put("success", false);
                result.put("message", "选择的协议已失效");
                return ResponseEntity.badRequest().body(result);
            }
            
            // 5. 验证协议适用性
            if (!isProtocolApplicable(protocol, orderService, operationStaff)) {
                result.put("success", false);
                result.put("message", "选择的协议不适用于当前服务和操作人员");
                return ResponseEntity.badRequest().body(result);
            }
            
            // 6. 更新服务派单信息
            orderService.setOperationStaffId(request.getOperationStaffId());
            orderService.setOperationDepartmentId(operationStaff.getDepartmentId());
            orderService.setInternalProtocolId(request.getProtocolId());
            orderService.setStatus(OrderService.ServiceStatus.ASSIGNED);
            orderService.setAssignedTime(LocalDateTime.now());
            orderService.setAssignedBy(request.getCustomerServiceId());
            orderService.setUpdatedTime(LocalDateTime.now());
            orderService.setUpdatedBy(request.getCustomerServiceId());
            
            OrderService savedService = orderServiceRepository.save(orderService);
            
            // 7. 创建派单通知
            ServiceAssignmentNotification notification = createAssignmentNotification(
                savedService, request, operationStaff);
            notification = notificationRepository.save(notification);
            
            // 8. 发送通知
            try {
                notificationService.sendAssignmentNotification(notification);
            } catch (Exception e) {
                log.warn("发送派单通知失败: {}", e.getMessage());
                // 不影响派单成功，继续执行
            }
            
            // 9. 准备返回数据
            result.put("success", true);
            result.put("message", "派单成功");
            result.put("data", Map.of(
                "serviceId", savedService.getServiceId(),
                "assignedStaffName", operationStaff.getStaffName(),
                "protocolName", protocol.getProtocolName(),
                "assignedTime", savedService.getAssignedTime(),
                "notificationId", notification.getNotificationId()
            ));
            
            log.info("服务派单成功 - 服务ID: {}, 操作员: {}", serviceId, operationStaff.getStaffName());
            return ResponseEntity.ok(result);
            
        } catch (EntityNotFoundException e) {
            result.put("success", false);
            result.put("message", e.getMessage());
            return ResponseEntity.badRequest().body(result);
        } catch (Exception e) {
            log.error("服务派单失败", e);
            result.put("success", false);
            result.put("message", "派单失败: " + e.getMessage());
            return ResponseEntity.status(500).body(result);
        }
    }
    
    @Operation(summary = "获取可用操作人员", description = "根据服务类型获取可以执行该服务的操作人员")
    @GetMapping("/services/{serviceCode}/available-staff")
    public ResponseEntity<List<Map<String, Object>>> getAvailableStaff(@PathVariable String serviceCode) {
        log.info("获取可用操作人员 - 服务代码: {}", serviceCode);
        
        try {
            // 查找所有有效的操作人员
            List<Staff> operationStaff = staffRepository.findByRoleTypeAndActiveTrue(Staff.RoleType.OPERATION);
            
            // TODO: 可以在这里添加更复杂的逻辑，比如根据服务类型和人员技能匹配
            // 目前返回所有操作人员
            
            List<Map<String, Object>> result = operationStaff.stream()
                .map(this::convertStaffToDTO)
                .collect(Collectors.toList());
            
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("获取可用操作人员失败", e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    @Operation(summary = "获取可用内部协议", description = "根据客服部门和操作人员部门匹配可用的内部协议")
    @GetMapping("/protocols/match")
    public ResponseEntity<List<Map<String, Object>>> matchProtocols(
            @RequestParam String customerServiceId,
            @RequestParam String operationStaffId,
            @RequestParam(required = false) String serviceCode,
            @RequestParam(required = false) String businessType) {
        log.info("匹配内部协议 - 客服: {}, 操作员: {}, 服务: {}, 业务类型: {}", 
                customerServiceId, operationStaffId, serviceCode, businessType);
        
        try {
            // 获取客服和操作人员信息
            Staff customerService = staffRepository.findById(customerServiceId).orElse(null);
            Staff operationStaff = staffRepository.findById(operationStaffId).orElse(null);
            
            if (customerService == null || operationStaff == null) {
                return ResponseEntity.badRequest().build();
            }
            
            // 查找匹配的协议
            List<InternalProtocol> protocols = internalProtocolRepository
                .findApplicableProtocols(
                    customerService.getDepartmentId(),
                    operationStaff.getDepartmentId(),
                    serviceCode,
                    businessType
                );
            
            List<Map<String, Object>> result = protocols.stream()
                .map(this::convertProtocolToDTO)
                .collect(Collectors.toList());
            
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("匹配内部协议失败", e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    @Operation(summary = "批量派单", description = "为多个服务同时指派操作人员")
    @PostMapping("/services/batch-assign")
    public ResponseEntity<Map<String, Object>> batchAssignServices(
            @Valid @RequestBody BatchServiceAssignmentRequest request) {
        log.info("批量派单请求 - 服务数量: {}", request.getAssignments().size());
        
        Map<String, Object> result = new HashMap<>();
        List<Map<String, Object>> successList = new ArrayList<>();
        List<Map<String, Object>> failureList = new ArrayList<>();
        
        try {
            for (ServiceAssignmentRequest assignment : request.getAssignments()) {
                try {
                    ResponseEntity<Map<String, Object>> response = assignService(
                        assignment.getServiceId(), assignment);
                    
                    if (response.getBody() != null && (Boolean) response.getBody().get("success")) {
                        successList.add(response.getBody());
                    } else {
                        failureList.add(Map.of(
                            "serviceId", assignment.getServiceId(),
                            "error", response.getBody() != null ? response.getBody().get("message") : "未知错误"
                        ));
                    }
                } catch (Exception e) {
                    failureList.add(Map.of(
                        "serviceId", assignment.getServiceId(),
                        "error", e.getMessage()
                    ));
                }
            }
            
            result.put("success", true);
            result.put("message", String.format("批量派单完成，成功: %d, 失败: %d", 
                successList.size(), failureList.size()));
            result.put("data", Map.of(
                "successCount", successList.size(),
                "failureCount", failureList.size(),
                "successList", successList,
                "failureList", failureList
            ));
            
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            log.error("批量派单失败", e);
            result.put("success", false);
            result.put("message", "批量派单失败: " + e.getMessage());
            return ResponseEntity.status(500).body(result);
        }
    }
    
    // ==================== 辅助方法 ====================
    
    /**
     * 验证协议适用性
     */
    private boolean isProtocolApplicable(InternalProtocol protocol, OrderService orderService, Staff operationStaff) {
        // 1. 检查协议是否匹配操作部门
        if (protocol.getOperationDepartmentId() != null && 
            !protocol.getOperationDepartmentId().equals(operationStaff.getDepartmentId())) {
            return false;
        }
        
        // 2. 检查服务类型匹配
        if (protocol.getServiceCode() != null && 
            !protocol.getServiceCode().equals(orderService.getServiceCode())) {
            return false;
        }
        
        // 3. 检查生效日期
        LocalDateTime now = LocalDateTime.now();
        if (protocol.getEffectiveDate() != null && now.isBefore(protocol.getEffectiveDate())) {
            return false;
        }
        
        // 4. 检查过期日期
        if (protocol.getExpiryDate() != null && now.isAfter(protocol.getExpiryDate())) {
            return false;
        }
        
        return true;
    }
    
    /**
     * 创建派单通知
     */
    private ServiceAssignmentNotification createAssignmentNotification(
            OrderService orderService, ServiceAssignmentRequest request, Staff operationStaff) {
        
        ServiceAssignmentNotification notification = new ServiceAssignmentNotification();
        notification.setOrderId(orderService.getOrderId());
        notification.setServiceId(orderService.getServiceId());
        notification.setFromStaffId(request.getCustomerServiceId());
        notification.setToStaffId(request.getOperationStaffId());
        notification.setProtocolId(request.getProtocolId());
        notification.setMessage(String.format(
            "您有新的服务派单: %s，请及时查看并确认内部协议。",
            orderService.getServiceName()
        ));
        notification.setStatus(ServiceAssignmentNotification.NotificationStatus.SENT);
        notification.setNotificationType(ServiceAssignmentNotification.NotificationType.SERVICE_ASSIGNMENT);
        notification.setPriority(request.getUrgent() != null && request.getUrgent() ? 
            ServiceAssignmentNotification.Priority.HIGH : ServiceAssignmentNotification.Priority.NORMAL);
        notification.setSentTime(LocalDateTime.now());
        notification.setCreatedTime(LocalDateTime.now());
        notification.setCreatedBy(request.getCustomerServiceId());
        
        return notification;
    }
    
    /**
     * 转换员工信息为DTO
     */
    private Map<String, Object> convertStaffToDTO(Staff staff) {
        Map<String, Object> dto = new HashMap<>();
        dto.put("staffId", staff.getStaffId());
        dto.put("staffName", staff.getStaffName());
        dto.put("departmentId", staff.getDepartmentId());
        dto.put("roleType", staff.getRoleType());
        dto.put("email", staff.getEmail());
        dto.put("phone", staff.getPhone());
        dto.put("active", staff.getActive());
        return dto;
    }
    
    /**
     * 转换协议信息为DTO
     */
    private Map<String, Object> convertProtocolToDTO(InternalProtocol protocol) {
        Map<String, Object> dto = new HashMap<>();
        dto.put("protocolId", protocol.getProtocolId());
        dto.put("protocolName", protocol.getProtocolName());
        dto.put("salesDepartmentId", protocol.getSalesDepartmentId());
        dto.put("operationDepartmentId", protocol.getOperationDepartmentId());
        dto.put("serviceCode", protocol.getServiceCode());
        dto.put("businessType", protocol.getBusinessType());
        dto.put("baseCommissionRate", protocol.getBaseCommissionRate());
        dto.put("performanceBonusRate", protocol.getPerformanceBonusRate());
        dto.put("description", protocol.getDescription());
        dto.put("effectiveDate", protocol.getEffectiveDate());
        dto.put("expiryDate", protocol.getExpiryDate());
        dto.put("active", protocol.getActive());
        return dto;
    }
    
    /**
     * 自定义异常类
     */
    public static class EntityNotFoundException extends RuntimeException {
        public EntityNotFoundException(String message) {
            super(message);
        }
    }
    
    public static class UnauthorizedException extends RuntimeException {
        public UnauthorizedException(String message) {
            super(message);
        }
    }
    
    public static class InvalidProtocolException extends RuntimeException {
        public InvalidProtocolException(String message) {
            super(message);
        }
    }
}