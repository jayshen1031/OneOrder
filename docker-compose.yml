services:
  # PostgreSQL数据库
  postgres:
    image: postgres:14-alpine
    container_name: oneorder-postgres
    environment:
      POSTGRES_DB: oneorder_clearing
      POSTGRES_USER: oneorder
      POSTGRES_PASSWORD: oneorder123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - oneorder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oneorder -d oneorder_clearing"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: oneorder-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - oneorder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: oneorder-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP端口
      - "15672:15672" # 管理界面端口
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - oneorder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OneOrder应用程序
  oneorder-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oneorder-app
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/oneorder_clearing
      SPRING_DATASOURCE_USERNAME: oneorder
      SPRING_DATASOURCE_PASSWORD: oneorder123
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      JAVA_OPTS: "-Xms512m -Xmx1g -Dspring.profiles.active=docker"
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    networks:
      - oneorder-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: oneorder-nginx
    ports:
      - "8082:80"
      - "8443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - oneorder-app
    networks:
      - oneorder-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  oneorder-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16